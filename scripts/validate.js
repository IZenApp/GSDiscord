#!/usr/bin/env node

import fs from 'fs';
import path from 'path';

function validateConfig() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n');
  
  let hasErrors = false;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
  const envPath = path.join(process.cwd(), '.env');
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run setup\n');
    hasErrors = true;
  } else {
    console.log('‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const credentialsPath = path.join(process.cwd(), 'credentials', 'google-credentials.json');
  if (!fs.existsSync(credentialsPath)) {
    console.log('‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('   –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤: credentials/google-credentials.json\n');
    hasErrors = true;
  } else {
    console.log('‚úÖ –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –Ω–∞–π–¥–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
    try {
      const credentials = JSON.parse(fs.readFileSync(credentialsPath, 'utf8'));
      if (!credentials.type || !credentials.project_id || !credentials.private_key) {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        hasErrors = true;
      } else {
        console.log('‚úÖ –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–µ–Ω');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
      hasErrors = true;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
  const requiredDirs = ['src', 'src/config', 'src/services', 'src/utils', 'logs', 'credentials'];
  const requiredFiles = ['src/index.js', 'src/config/config.js', 'package.json'];

  console.log('\nüèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
  
  requiredDirs.forEach(dir => {
    const dirPath = path.join(process.cwd(), dir);
    if (fs.existsSync(dirPath)) {
      console.log(`‚úÖ –ü–∞–ø–∫–∞ ${dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    } else {
      console.log(`‚ùå –ü–∞–ø–∫–∞ ${dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      hasErrors = true;
    }
  });

  requiredFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ –§–∞–π–ª ${file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    } else {
      console.log(`‚ùå –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      hasErrors = true;
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const requiredDeps = ['googleapis', 'google-auth-library', 'node-fetch'];
    
    requiredDeps.forEach(dep => {
      if (packageJson.dependencies && packageJson.dependencies[dep]) {
        console.log(`‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
      } else {
        console.log(`‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        hasErrors = true;
      }
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json:', error.message);
    hasErrors = true;
  }

  // –ò—Ç–æ–≥
  console.log('\n' + '='.repeat(50));
  if (hasErrors) {
    console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞');
    process.exit(1);
  } else {
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É');
    console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: npm start');
  }
}

validateConfig();
